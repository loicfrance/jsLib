'use strict';import{Vec2,Shape,Rect,Line}from"./geometry2d.mjs";class Ray extends Shape{constructor(origin,radians){super();this.origin=origin;this.angle=radians}get center(){return this.origin}set center(center){this.origin.set(center)}get perimeter(){return Infinity}moveXY(dX,dY){this.origin.addXY(dX,dY);return this}move(delta){this.origin.add(delta);return this}rotate(radians){this.angle+=radians;return this}mirrorVertically(axisY=this.center.y){this.origin.mirrorVertically(axisY);this.angle=-this.angle;
return this}mirrorHorizontally(axisX=this.center.x){this.origin.mirrorHorizontally(axisX);this.angle=Math.PI-this.angle;return this}endPoint(length){return this.origin.clone().addXY(Math.cos(this.angle)*length,Math.sin(this.angle)*length)}getLine(length){return Line.createFromPointVector(this.origin,Vec2.createFromAngle(this.angle,length))}pushPath(context){const p=this.endPoint(context.canvas.clientWidth+context.canvas.clientHeight);context.moveTo(this.origin.x,this.origin.y);context.moveTo(this.origin.x,
this.origin.y);context.lineTo(p.x,p.y)}getVertices(verticesArray,vOffset,indicesArray,iOffset){const o=offset/2,t=this.endPoint(Number.MAX_SAFE_INTEGER);verticesArray[vOffset++]=this.origin.x;verticesArray[vOffset++]=this.origin.y;verticesArray[vOffset++]=t.x;verticesArray[vOffset++]=t.y;indicesArray[iOffset++]=o;indicesArray[iOffset++]=o+1;indicesArray[iOffset++]=o}intersect(shape){const rect=shape instanceof Rect?shape:shape.getRect();return(new Line(this.center,this.endPoint(Vec2.distance(this.origin,
shape.center)+rect.width+rect.height))).intersect(shape)}getIntersectionPoints(shape){const rect=shape instanceof Rect?shape:shape.getRect();return this.getLine(Vec2.distance(this.origin,shape.center)+rect.width+rect.height).getIntersectionPoints(shape)}contains(point){return this.endPoint(Vec2.distance(this.origin,point)).equals(point)}getRect(){const endPoint=this.endPoint(Infinity);return new Rect(Math.min(endPoint.x,this.origin.x),Math.min(endPoint.y,this.origin.y),Math.max(endPoint.x,this.origin.x),
Math.max(endPoint.y,this.origin.y))}get directorVect(){return Vec2.createFromAngle(this.angle)}closestpointTo(p){let A=this.origin,AC=Vec2.translation(A,p),u=this.directorVect,d=Vec2.dotProd(u,AC);return d<0?u.set(A):u.mul(d).add(A)}getRadius(){return Infinity}clone(){return new Ray(this.origin,this.angle)}}Ray.prototype.glPointsNumber=2;Ray.prototype.glTrinagles=1;export default Ray;export{Ray};
