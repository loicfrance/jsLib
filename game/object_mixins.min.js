'use strict';const health={health:0,setHealth:function(value){this.health=value},setMaxHealth:function(value){this.maxHealth=value},heal:function(value){if(this.maxHealth!==undefined&&this.health+value>this.maxHealth)value=this.maxHealth;else value+=this.health;this.setHealth(value)},receiveDamage:function(gameManager,damages){if(damages>=this.health){this.setHealth(0);this.kill(gameManager)}else this.setHealth(this.health-damages)},getHealth:function(){return this.health},getMaxHealth:function(){return this.maxHealth}},
energy={energy:0,setEnergy:function(value){this.energy=value},setMaxEnergy:function(value){this.maxEnergy=value},recoverEnergy:function(value){const max=this.getMaxEnergy(),e=this.getEnergy();if(e<max)this.setEnergy(e+value<max?e+value:max)},useEnergy:function(value){const e=this.getEnergy();if(value>e)return false;else{this.setEnergy(e-value);return true}},getEnergy:function(){return this.energy||0},getMaxEnergy:function(){return this.maxEnergy||0}},tiledMap={tilesOccupation:[[1]],setTile(tiledMap,
x,y){this.position.set(tiledMap.getTileCenter(x,y))},getTile(tiledMap){return tiledMap.getTileIndices(this.position)}},tag={addTag:function(tag){if(!this.tags)this.tags=[tag];else this.tags.push(tag)},hasTag:function(tag){return this.tags!==undefined&&this.tags.indexOf(tag)!==-1},getTags:function(){return this.tags},isTagged:function(){return this.tags!==undefined&&this.tags.length>0},clearTags:function(){this.tags=[]}},tag_canHaveTag=(obj)=>obj.hasTag!==undefined,tag_hasTag=(tag,obj)=>obj.hasTag&&
obj.hasTag(tag),tag_getAllObjectsWithTag=(gameManager,tag=null)=>{if(tag)return gameManager.getObjects(tag_hasTag.bind(undefined,tag));else return gameManager.getObjects(tag_canHaveTag)};export{health,energy,tiledMap,tag,tag_canHaveTag,tag_hasTag,tag_getAllObjectsWithTag};
