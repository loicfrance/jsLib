'use strict';import{Vec2,Circle,Polygon}from"../geometry2d/geometry2d.mjs";import GameObject from"./object.mjs";import{ShapedObject2dCollider}from"./renderer_collider.mjs";import{collisionLayersFilter}from"./manager.mjs";class Bullet extends GameObject{constructor(launcher,position,speed,damage,maxRect,lifeTime=0){super(position,speed);this.damage=damage;if(lifeTime)this.lifeTime=lifeTime;this.launcher=launcher;this.maxRect=maxRect}setLauncher(object){this.launcher=object}getLauncher(){return this.launcher}setDamages(value){this.damage=
value}getDamages(){return this.damage}onFrame(gameManager,dT){super.onFrame(gameManager,dT);if(this.lifeTime!==undefined){if(this.lifeTime<=0)this.kill(gameManager);this.lifeTime-=dT}}moveOnFrame(gameManager,dT){super.moveOnFrame(gameManager,dT);if(this.isOutOfRect(this.maxRect))this.kill(gameManager)}canCollide(object){return this.collider!==undefined&&object!==this.launcher}onCollision(gameManager,object){if(this.damage&&object.receiveDamage){object.receiveDamage(gameManager,this.damage);if(this.killOnCollision){this.damage=
0;this.kill(gameManager)}}else if(this.killOnCollision&&this.damage)this.kill(gameManager)}}Bullet.defaultShape=Polygon.Absolute(Vec2.createVec2Array([-10,2,5,2,7,1,8,0,7,1,5,-2,-10,-2]));Bullet.prototype.renderLayer=0;Bullet.prototype.killOnCollision=true;class BulletCollider extends ShapedObject2dCollider{constructor(shape){super(shape)}collidesInside(collider){return true}}const getSteeringForce=(objPos,maxSpd,maxForce,currentSpd,targetPos)=>Vec2.translation(objPos,targetPos).setMagnitude(maxSpd).remove(currentSpeed).clampMagnitude(0,
maxForce);class HomingBullet extends Bullet{constructor(launcher,damage,position,speed,maxRect,lifeTime,steerForce,maxAngle){super(launcher,position,speed,damage,maxRect,lifeTime);this.steerForce=steerForce;this.maxSpeed=speed.magnitude;this.maxAngle=maxAngle;this.angle=0;this.setAccelerationXY(0,0)}getMaxSpeed(distance){return this.maxSpeed*(1-Math.sqrt(this.maxSpeed/(150*distance)))}getSteerForce(maxSpeed,distance){return this.steerForce*(maxSpeed/Math.pow(distance,1.2))}getTargetPosition(gameManager){let res,
angle,maxAngle=this.maxAngle,pos=this.getPosition(),targets=gameManager.getObjects(collisionLayersFilter.bind(undefined,this.bodyLayer)),i=targets.length;while(i--)if(targets[i]!==this.launcher){angle=(Vec2.translation(pos,targets[i].getPosition()).angle-this.radians)%(Math.PI*2);if(angle>Math.PI)angle=Circle.PI2-angle;if(angle<maxAngle){maxAngle=angle;res=targets[i]}}return res?res.getPosition():null}onFrame(gameManager,dT){let t=this.getTargetPosition(gameManager);if(t){let p=this.getPosition(),
accel=Vec2.translation(p,t),d=accel.magnitude,ms=this.getMaxSpeed(dist),steer=this.getSteerForce(ms,d);accel.magnitude=steer;accel.add(getSteeringForce(pos,maxSpeed,steer,this.getSpeed(),target)).magnitude=steer;this.setAcceleration(accel);super.onFrame(gameManager,dT);this.setSpeed(this.getSpeed().clampMagnitude(0,maxSpeed))}else{this.setAccelerationXY(0,0);super.onFrame(gameManager,dT)}const a=this.getSpeed().angle;this.rotate(a-this.angle);this.angle=a}};
