'use strict';import{exclusionFilter,instanceFilter}from"../utils/filters.mjs";import{Viewer}from"./viewers.mjs";import{PhysicWorld}from"./physics.mjs";const GameEvent={GAME_FRAME:1,GAME_START:2,GAME_STOP:3,OBJECT_CREATED:4,OBJECT_DESTROYED:5},renderableFilter=(obj)=>obj.renderLayer>=0,renderLayerSort=(obj1,obj2)=>obj1.renderLayer-obj2.renderLayer,bodyLayerFilter=(layers,obj)=>layers.includes(obj.bodyLayer,0),collisionLayersFilter=(layer,obj)=>obj.collisionLayers.includes(layer,0),canCollideFilter=
(obj)=>obj.bodyLayer>=0,collisionFullFilter=(obj1,obj2)=>(obj1.collisionLayers.includes(obj2.bodyLayer)||obj2.collisionLayers.includes(obj1.bodyLayer))&&obj1.canCollideWith(obj2)&&obj2.canCollideWith(obj1)&&obj1.collides(obj2),collisionPrioritySort=(obj1,obj2)=>obj1.collisionPriority-obj2.collisionPriority;class GameManager{constructor(parameters){const objects=[],objectsToAdd=[],objectsToRemove=[];let objects_length=0,lastStamp=0,callback=null,interval=null,rafHandler=null;this.viewer=null;this.gameDt=
1/60;this.realDt=1/60;this.physicWorld=null;this.getObjects=function(filter=null){return filter?objects.filter(filter):objects};this.getObjectIndex=function(obj){return objects.indexOf(obj)};this.getObjectAt=function(index){return objects[index]};this.getInstancesOf=function(objClass){return this.getObjects(instanceFilter.bind(undefined,objClass))};this.addObject=function(obj,check=true){if(check&&objectsToAdd.indexOf(obj)!==-1)console.stack("the object "+obj+" is already being added to the game");
else objectsToAdd.push(obj)};this.addObjects=function(objects,check=true){Array.prototype.push.apply(objectsToAdd,check?objects.filter(exclusionFilter.bind(undefined,objectsToAdd)):objects)};this.removeObject=function(obj,check=true){if(!(check&&objectsToRemove.indexOf(obj)!==-1))objectsToRemove.push(obj)};this.removeObjects=function(objects,check=true){Array.prototype.push.apply(objectsToRemove,check?objects.filter(exclusionFilter.bind(undefined,objectsToRemove)):objects)};this.clearObjects=function(){objectsToAdd.splice(0,
objectsToAdd.length);objectsToRemove.splice(0,objectsToAdd.length);this.removeObjects(objects,false)};this.start=function(){if(!this.isRunning()){lastStamp=0;if(callback)callback(GameEvent.GAME_START,0,null);interval=setInterval(gameLoop,this.realDt*1E3)}};this.stop=function(){if(this.isRunning()){clearInterval(interval);interval=null;if(callback)callback(GameEvent.GAME_STOP,0,null)}};this.isRunning=function(){return interval!=null};this.startRendering=function(){if(!rafHandler)rafHandler=requestAnimationFrame(draw)};
this.stopRendering=function(){cancelAnimationFrame(rafHandler);rafHandler=null};this.isRendering=function(){return rafHandler!=null};this.setEventsCallback=function(cb){callback=cb};this.getEventsCallback=function(){return callback};this.fireObjectCreatedEvent=function(object){if(callback)callback(GameEvent.OBJECT_CREATED,0,object)};this.fireObjectDestroyedEvent=function(object){if(callback)callback(GameEvent.OBJECT_DESTROYED,0,object)};const draw=function(){if(rafHandler)rafHandler=requestAnimationFrame(draw);
if(this.viewer)this.viewer.render(this,objects)}.bind(this);const detectCollisions=function(){const bodies=objects.filter(canCollideFilter).sort(collisionPrioritySort),bodies_save=bodies.slice(),len=bodies.length;let obj,i,other;if(len){i=len;while(i--)bodies[i].prepareCollision();while(obj=bodies.pop()){if(obj.collisionPriority<0)break;other=bodies.filter(collisionFullFilter.bind(undefined,obj));if(other.length)obj.handleCollision(this,other)}i=len;while(i--)bodies_save[i].endCollision(this)}}.bind(this);
const gameLoop=function(){let obj,i;while(obj=objectsToAdd.pop()){objects.push(obj);objects_length++}if(callback)callback(GameEvent.GAME_FRAME,this.gameDt,null);i=objects_length;while(i--)if(objects[i].living)objects[i].onFrame(this,this.gameDt);detectCollisions();while(obj=objectsToRemove.pop()){i=objects.indexOf(obj);if(i>=0){obj.onDeath(this);objects.splice(i,1);objects_length--}}}.bind(this);if(parameters){if(parameters.viewer instanceof Viewer)this.setViewer(parameters.viewer);if(parameters.onGameEvent instanceof
Function)this.setEventsCallback(parameters.onGameEvent);if(!isNaN(+parameters.dt))this.gameDt=this.realDt=+parameters.dt;if(!isNaN(+parameters.gameDt))this.gameDt=+parameters.gameDt;if(!isNaN(+parameters.realDt))this.realDt=+parameters.realDt;if(parameters.physicWorld instanceof PhysicWorld)this.physicWorld=parameters.physicWorld}}setViewer(viewer){this.viewer=viewer}getViewer(){return this.viewer}}export{GameEvent,renderLayerSort,renderableFilter,bodyLayerFilter,collisionLayersFilter,canCollideFilter,
collisionFullFilter,collisionPrioritySort,GameManager};
