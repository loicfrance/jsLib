'use strict';import{Vec2}from"../geometry2d/Vec2.mjs";import{Rect}from"../geometry2d/Rect.mjs";import{ShapedObjectRenderer,ShapedObject2dCollider}from"./renderer_collider.mjs";class GameObject{constructor(position=null,speed=null,accel=null){if(position){this.position=position.clone();if(speed){this.speed=speed.clone();if(accel)this.accel=accel.clone()}}}getPosition(){return this.position||Vec2.ZERO}copyPosition(){return this.getPosition().clone()}setPosition(pos){return this.setPositionXY(pos.x,
pos.y)}setPositionXY(x,y){if(this.position)this.position.setXY(x,y);else this.position=new Vec2(x,y);return this}getSpeed(){return this.speed||Vec2.ZERO}copySpeed(){return this.getSpeed().clone()}setSpeed(spd){return this.setSpeedXY(spd.x,spd.y)}setSpeedXY(x,y){if(this.speed)this.speed.setXY(x,y);else this.speed=new Vec2(x,y);return this}getAcceleration(){return this.accel||Vec2.ZERO}copyAcceleration(){return this.getAcceleration().clone()}setAcceleration(acc){this.setAccelerationXY(acc.x,acc.y);
return this}setAccelerationXY(x,y){if(this.accel)this.accel.setXY(x,y);else this.accel=new Vec2(x,y);return this}getRotationSpeed(){return this.rotationSpeed||0}setRotationSpeed(radPerSec){this.rotationSpeed=radPerSec}rotate(radians){if(this.renderer)this.renderer.rotate(radians);if(this.collider)this.collider.rotate(radians);return this}move(delta){return this.moveXY(delta.x,delta.y)}moveXY(x,y){this.getPosition().addXY(x,y);return this}accelerate(deltaSpd){return this.accelerateXY(deltaSpd.x,deltaSpd.y)}accelerateXY(x,
y){this.getSpeed().addXY(x,y);return this}scale(factor){if(this.renderer)this.renderer.scale(factor);if(this.collider)this.collider.scale(factor);return this}getRect(){return Rect.getUnion([this.getRenderRect(),this.getColliderRect()])}getRenderRect(){return this.renderer&&this.renderer.setPosition(this.getPosition()).getRect()||Rect.createFromPoint(this.getPosition())}getColliderRect(){return this.collider&&this.collider.setPosition(this.getPosition()).getRect()||Rect.createFromPoint(this.getPosition())}getRadius(){return Math.max(this.getRenderRadius(),
this.getColliderRadius())}getRenderRadius(){return this.renderer?this.renderer.getRadius():0}getColliderRadius(){return this.collider?this.collider.getRadius():0}onFrame(gameManager,dT){this.moveOnFrame(gameManager,dT);this.accelerateOnFrame(gameManager,dT);this.rotateOnFrame(gameManager,dT)}moveOnFrame(gameManager,dT){let spd=this.getSpeed();if(!spd.isZero())this.move(spd.clone().mul(dT))}accelerateOnFrame(gameManager,dT){let acc=this.getAcceleration();if(!acc.isZero())this.accelerate(acc.clone().mul(dT))}rotateOnFrame(gameManager,
dT){if(this.rotationSpeed)this.rotate(this.rotationSpeed*dT)}setCollider(collider){this.collider=collider}canCollideWith(object){return true}prepareCollision(){this.collider.prepareCollision(this.getPosition())}endCollision(gameManager){}collides(obj){return this.collider.collides(obj.collider)}handleCollision(gameManager,objects){let i=objects.length;while(i--){this.onCollision(gameManager,objects[i]);objects[i].onCollision(gameManager,this)}}onCollision(gameManager,object){}isInCollisionLayer(layer){return this.collisionLayers.indexOf(layer)>=
0}setRenderer(renderer){this.renderer=renderer}render(context){this.renderer&&this.renderer.setPosition(this.getPosition()).render(context)}renderDebug(context){this.collider&&this.collider.render(context)}kill(gameManager){gameManager.removeObject(this)}onDeath(gameManager){}isOutOfRect(rect,marginX=0,marginY=marginX){let r=this.getRect().addMarginsXY(marginX,marginY);return rect.xMin>r.xMax||rect.xMax<r.xMin||rect.yMin>r.yMax||rect.yMax<r.yMin}maintainInRect(rect,marginX=0,marginY=marginX){rect=
rect.clone().addMarginsXY(-marginX,-marginY);let objRect=this.getRect(),delta=new Vec2(rect.xMin>objRect.xMin?rect.xMin-objRect.xMin:rect.xMax<objRect.xMax?rect.xMax-objRect.xMax:0,rect.yMin>objRect.yMin?rect.yMin-objRect.yMin:rect.yMax<objRect.yMax?rect.yMax-objRect.yMax:0);if(!delta.isZero())this.moveXY(delta.x,delta.y);return delta}}GameObject.prototype.renderLayer=0;GameObject.prototype.bodyLayer=0;GameObject.prototype.collisionPriority=0;GameObject.prototype.collisionLayers=[0];GameObject.prototype.living=
true;class SimpleShapedObject extends GameObject{constructor(shape,color){super(shape.center);this.setRenderer(new ShapedObjectRenderer(shape,color));this.setCollider(new ShapedObject2dCollider(shape))}}export default GameObject;export{GameObject,SimpleShapedObject};
