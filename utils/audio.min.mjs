'use strict';import{polyfill}from "./tools";polyfill(window,"AudioContext",["webkit"]);function loadSound(audioContext, onResult, onError, url){const request=new XMLHttpRequest;request.open("GET",url,true);request.responseType="arraybuffer";request.onload=function(){context.decodeAudioData(request.response,onResult,onError)};request.send()}function getNoteFreq(semitones){return 440*Math.pow(2,semitones-69)}function createSinusOscillator(audioContext, freq){let o=audioContext.createOscillator();o.type=
"sine";o.frequency.value=freq;return o}function createSquareOscillator(audioContext,freq){let o=audioContext.createOscillator();o.type="square";o.frequency.value=freq;return o}function createTriangleOscillator(audioContext,freq){let o=audioContext.createOscillator();o.type="triangle";o.frequency.value=freq;return o}function createSawToothOscillator(audioContext,freq){let o=audioContext.createOscillator();o.type="sawtooth";o.frequency.value=freq;return o}function createCustomOscillator(audioContext,
freq,periodicWave){let o=audioContext.createOscillator();o.type="custom";o.frequency.value=freq;o.setPeriodicWave(periodicWave);return o}function connectNodes(nodes){let i,n=nodes.length;for(i=0;i<n-1;i++)nodes[i].connect(nodes[i+1])}export{loadSound,getNoteFreq,createSinusOscillator,createSquareOscillator,createTriangleOscillator,createSawToothOscillator,createCustomOscillator,connectNodes};
