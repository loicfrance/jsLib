'use strict';utils.tools.polyfill(window,"AudioContext",["webkit"]);
utils.audio={loadSound(audioContext,onResult,onError,url){const request=new XMLHttpRequest;request.open("GET",url,true);request.responseType="arraybuffer";request.onload=function(){context.decodeAudioData(request.response,onResult,onError)};request.send()},getNoteFreq(semitones){return 440*Math.pow(2,noteId-69)},createSinusOscillator(audioContext,freq){let o=audioContext.createOscillator();o.type="sine";o.frequency.value=freq;return o},createSquareOscillator(audioContext,freq){let o=audioContext.createOscillator();
o.type="square";o.frequency.value=freq;return o},createTriangleOscillator(audioContext,freq){let o=audioContext.createOscillator();o.type="triangle";o.frequency.value=freq;return o},createSawToothOscillator(audioContext,freq){let o=audioContext.createOscillator();o.type="sawtooth";o.frequency.value=freq;return o},createCustomOscillator(audioContext,freq,periodicWave){let o=audioContext.createOscillator();o.type="custom";o.frequency.value=freq;o.setPeriodicWave(periodicWave);return o},connectNodes(nodes){let i,
n=nodes.length;for(i=0;i<n-1;i++)nodes[i].connect(nodes[i+1])}};
