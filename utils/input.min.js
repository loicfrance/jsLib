'use strict';{if(window);else;const KeyState={RELEASED:0,PRESSED:1};const Key={BACKSPACE:8,TAB:9,ENTER:13,SHIFT:16,CTRL:17,ALT:18,CAPS_LOCK:20,ESCAPE:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,PRINT_SCR:44,INSERT:45,DELETE:46,ZERO:48,ONE:49,TWO:50,THREE:51,FOUR:52,FIVE:53,SIX:54,SEVEN:55,EIGHT:56,NINE:57,A:65,B:66,C:67,D:68,E:69,F:70,G:71,H:72,I:73,J:74,K:75,L:76,M:77,N:78,O:79,P:80,Q:81,R:82,S:83,T:84,U:85,V:86,W:87,X:88,Y:89,Z:90,LEFT_WIN:91,RIGH_WIN:92,SELECT:93,
NUM_0:96,NUM_1:97,NUM_2:98,NUM_3:99,NUM_4:100,NUM_5:101,NUM_6:102,NUM_7:103,NUM_8:104,NUM_9:105,MULTIPLY:106,ADD:107,SUBTRACT:109,DECIMAL_POINT:110,DIVIDE:111,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,NUM_LOCK:144,SCROLL_LOCK:145,SEMI_COLON:186,EQUAL:187,COMMA:188,DASH:189,PERIOD:190,FORWARD_SLASH:191,GRAVE_ACCENT:192,OPEN_BRACKET:219,BACK_SLASH:220,CLOSE_BRACKET:221,SINGLE_QUOTE:222,FN:255,number:256};const MouseEvent={UP:"onmouseup",DOWN:"onmousedown",
CLICK:"onclick",DBCLICK:"ondbclick",MOVE:"onmousemove",ENTER:"onmouseover",EXIT:"onmouseout",CTX_MENU:"oncontextmenu"};const MouseButton={UNKNOWN:0,LEFT:1,MIDDLE:2,RIGHT:3};const KEYS_NUMBER=Key.number;const KEY_STATE=KeyState;const MOUSE_BTN=MouseButton;const fixMouseWhich=(evt)=>{if(!evt.which&&evt.button)evt.which=evt.button%8-evt.button%4===4?MOUSE_BTN.MIDDLE:evt.button%4-evt.button%2===2?MOUSE_BTN.RIGHT:evt.button%2===1?MOUSE_BTN.LEFT:MOUSE_BTN.UNKNOWN};const onKeyEvt=(keyStates,callbacks,state,
evt)=>{if(keyStates[evt.keyCode]!==state){keyStates[evt.keyCode]=state;let len=callbacks.length;for(let i=0;i<len;i++)if(callbacks[i](evt.keyCode,state))evt.preventDefault()}};class InputManager{constructor(element){this.element=element;let keyStates=new Uint8Array(KEYS_NUMBER);for(let i=KEYS_NUMBER-1;i>=0;i--)keyStates[i]=KEY_STATE.RELEASED;let keyboardCallbacks=[];const onKeyUp=onKeyEvt.bind(this,keyStates,keyboardCallbacks,KEY_STATE.RELEASED);const onKeyDown=onKeyEvt.bind(this,keyStates,keyboardCallbacks,
KEY_STATE.PRESSED);const getVec=(evt)=>{let elmtRect=this.element.getBoundingClientRect();return new Vec2(evt.pageX-elmtRect.left,evt.pageY-elmtRect.top)};const onMouseEvt=(callback,evtType,evt)=>{fixMouseWhich(evt);if(callback(evt,evtType,evt.which,getVec(evt)))evt.preventDefault()};this.enableKeyboardListener=function(enable,capturingMode=true){if(enable){if(this.element!=document&&!this.element.hasAttribute("tabindex"))this.element.setAttribute("tabindex",-1);this.element.addEventListener("keydown",
onKeyDown,capturingMode);this.element.addEventListener("keyup",onKeyUp,capturingMode)}else{this.element.removeEventListener("keydown",onKeyDown);this.element.removeEventListener("keyup",onKeyUp)}};this.addKeyCallback=(callback)=>{keyboardCallbacks.push(callback)};this.removeKeyCallback=(callback)=>{keyboardCallbacks.remove(callback)};this.getKeyState=(keyCode)=>keyStates[keyCode];this.setMouseEventsCallback=function(callback){if(callback){let e;for(let evtType in MouseEvent)if(MouseEvent.hasOwnProperty(evtType)){e=
MouseEvent[evtType];this.element[e]=onMouseEvt.bind(this,callback,e)}}else for(let evtType in MouseEvent)if(MouseEvent.hasOwnProperty(evtType))this.element[MouseEvent[evtType]]=null};this.setFocusCallback=(callback)=>{if(callback){this.element.onfocus=(_)=>callback(true);this.element.onblur=(_)=>callback(false)}else{this.element.onfocus=null;this.element.onblur=null}};this.pointerLock=(eventListener)=>{if(eventListener){if(eventListener.pointerLockChange){document.addEventListener("pointerlockchange",
eventListener.pointerLockChange,false);document.addEventListener("mozpointerlockchange",eventListener.pointerLockChange,false);document.addEventListener("webkitpointerlockchange",eventListener.pointerLockChange,false)}if(eventListener.pointerLockError){document.addEventListener("pointerlockerror",eventListener.pointerLockError,false);document.addEventListener("mozpointerlockerror",eventListener.pointerLockError,false);document.addEventListener("webkitpointerlockerror",eventListener.pointerLockError,
false)}}if(document.webkitFullscreenElement===this.element||document.mozFullscreenElement===this.element||document.fullscreenElement===this.element){this.element.requestPointerLock=this.element.requestPointerLock||this.element.mozRequestPointerLock||this.element.webkitRequestPointerLock;this.element.requestPointerLock()}};this.fullScreen=(callback)=>{element.requestFullscreen=element.requestFullscreen||element.mozRequestFullscreen||element.mozRequestFullScreen||element.webkitRequestFullscreen;element.requestFullscreen();
if(callback){document.addEventListener("fullscreenchange",callback,false);document.addEventListener("mozfullscreenchange",callback,false);document.addEventListener("webkitfullscreenchange",callback,false)}}}}class KeyMap{constructor(){let actions=new Array(Key.number);let cb=undefined;const callback=(keyCode,keyState)=>{if(cb){let a=this.getAction(keyCode);return a&&cb(a,keyState)||false}};this.setAction=(keyCode,action)=>{if(keyCode.length)for(let i=0;i<keyCode.length;i++)this.setAction(keyCode[i],
action);else if(action==undefined){if(actions[keyCode]!=undefined)actions[keyCode]=undefined}else actions[keyCode]=action};this.getAction=(keyCode)=>{return actions[keyCode]};this.isKeyDown=(inputManager,action)=>{let code=-1;do{code=actions.indexOf(action,code+1);if(code!==-1)if(inputManager.getKeyState(code)===InputManager.KeyState.DOWN)return true}while(code!==-1);return false};this.getKeys=(action)=>{let codes=[],i=actions.indexOf(action);while(i!==-1){codes.push(i);i=actions.indexOf(action,i+
1)}return codes};this.setCallback=(callback)=>{cb=callback};this.enable=function(inputManager){inputManager.addKeyCallback(callback)};this.disable=function(inputManager){inputManager.removeKeyCallback(callback)}}}if(window){window.utils=window.utils||{};utils.input={KeyState,Key,MouseEvent,MouseButton,InputManager,KeyMap}}else;};
